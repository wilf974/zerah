/**
 * Script de nettoyage des comptes programm√©s pour suppression
 * Supprime d√©finitivement les comptes apr√®s 30 jours
 * 
 * √Ä ex√©cuter via cron job ou scheduleur :
 * 0 0 * * * cd /opt/apps/zerah && node scripts/cleanup-deleted-accounts.js
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanupDeletedAccounts() {
  try {
    console.log('üóëÔ∏è D√©marrage du nettoyage des comptes programm√©s pour suppression...');

    const now = new Date();
    
    // Trouver tous les comptes programm√©s pour suppression et dont le d√©lai est pass√©
    const accountsToDelete = await prisma.user.findMany({
      where: {
        deletionScheduledFor: {
          lte: now, // Programm√© pour avant maintenant
        },
        isDeleted: false, // Pas encore supprim√©
        deletionRequestedAt: {
          not: null, // Une demande de suppression existe
        },
      },
      select: {
        id: true,
        email: true,
        deletionScheduledFor: true,
      },
    });

    if (accountsToDelete.length === 0) {
      console.log('‚úÖ Aucun compte √† supprimer pour le moment');
      return;
    }

    console.log(`üìä ${accountsToDelete.length} compte(s) √† supprimer d√©finitivement...`);

    // Supprimer chaque compte et ses donn√©es associ√©es
    for (const user of accountsToDelete) {
      try {
        console.log(`  üóëÔ∏è Suppression du compte : ${user.email}...`);

        // Supprimer toutes les donn√©es de l'utilisateur (en cascade via Prisma)
        await prisma.user.delete({
          where: { id: user.id },
        });

        console.log(`  ‚úÖ Compte supprim√© : ${user.email}`);
      } catch (error) {
        console.error(`  ‚ùå Erreur lors de la suppression de ${user.email} :`, error.message);
      }
    }

    console.log(`\n‚úÖ Nettoyage termin√© ! ${accountsToDelete.length} compte(s) supprim√©(s) d√©finitivement`);
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage :', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le nettoyage
cleanupDeletedAccounts();
