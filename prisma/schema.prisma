// Schéma Prisma pour Habit Tracker

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  habits    Habit[]
  sessions  Session[]
  otpCodes  OTPCode[]
  
  // Profil étendu pour recommandations intelligentes
  activityLevel  String?   // "sedentaire", "modere", "actif", "tres_actif"
  height         Int?      // Taille en cm
  weight         Int?      // Poids en kg
  gender         String?   // "homme", "femme", "autre"
  age            Int?      // Âge en années
  profileUpdated DateTime?
  
  // RGPD Consent Management
  consentAnalytics   Boolean  @default(false)  // Consentement pour analytics
  consentMarketing   Boolean  @default(false)  // Consentement pour emails marketing
  consentCookies     Boolean  @default(false)  // Consentement pour cookies
  consentUpdatedAt   DateTime?                 // Date de mise à jour des consentements
  
  // Data Retention & Privacy
  dataExportedAt     DateTime?                 // Date de dernier export
  deletionRequestedAt DateTime?               // Date demande suppression (soft delete)
  deletionScheduledFor DateTime?              // Date suppression programmée (30 jours après demande)
  isDeleted          Boolean  @default(false) // Soft delete flag
  
  // Feedback & Suggestions
  feedbacks Feedback[] // Suggestions/feedback soumis par l'utilisateur
}

model OTPCode {
  id        Int      @id @default(autoincrement())
  code      String
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Habit {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  color       String?
  userId      Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  
  // Archive & Organization
  isArchived  Boolean      @default(false)  // Soft delete pour archiver
  category    String?      // Catégorie (ex: "Sport", "Santé", "Apprentissage")
  tags        String?      // Tags comma-separated (ex: "cardio,motivation")
  
  // Custom Objectives
  frequency   String       @default("daily")  // "daily", "3x/week", "2x/week", "weekly", etc.
  targetDays  Int          @default(7)        // Nombre de jours objectif par semaine (7=daily, 3=3x/week, etc.)
  
  entries     HabitEntry[]
  details     HabitDetail[] // Champs personnalisés (ml, durée, etc.)
}

model HabitDetail {
  id        Int     @id @default(autoincrement())
  habitId   Int
  habit     Habit   @relation(fields: [habitId], references: [id], onDelete: Cascade)
  name      String  // Ex: "ml", "durée (min)", "km"
  type      String  // "number", "duration", "distance"
  unit      String? // Ex: "ml", "min", "km"
  values    HabitEntryValue[] // Relation inverse
  createdAt DateTime @default(now())

  @@unique([habitId, name])
}

model HabitEntry {
  id        Int      @id @default(autoincrement())
  habitId   Int
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  completed Boolean  @default(true)
  note      String?
  values    HabitEntryValue[] // Valeurs des détails personnalisés
  createdAt DateTime @default(now())

  @@unique([habitId, date])
}

model HabitEntryValue {
  id          Int        @id @default(autoincrement())
  entryId     Int
  entry       HabitEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  detailId    Int
  detail      HabitDetail @relation(fields: [detailId], references: [id], onDelete: Cascade)
  value       Float      // Stocke la valeur numérique
  createdAt   DateTime   @default(now())

  @@unique([entryId, detailId])
}

model Feedback {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String    // Titre du feedback
  description String  // Description détaillée
  category  String    // "bug", "feature", "ux", "other"
  status    String    @default("open") // "open", "in-review", "planned", "completed", "rejected"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relation inverse avec User pour retrouver ses suggestions
  @@index([userId])
  @@index([category])
  @@index([status])
}

